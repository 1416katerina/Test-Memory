
import customtkinter as ctk
from tkinter import messagebox
from functionality import evaluate_level, generate_sequence, save_result, analyze_results, get_display_time
import sys
import os

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("blue")
ctk.deactivate_automatic_dpi_awareness()

FONT_LARGE = ("Arial", 38)
FONT_MEDIUM = ("Arial", 32)
FONT_SMALL = ("Arial", 28)
BUTTON_COLOR = "#4B7BFF"
HOVER_COLOR = "#3A6BEF"
TEXT_COLOR = "#333333"
BACKGROUND_COLOR = "#F5F5F5"


class MainApplication(ctk.CTk):
    def __init__(self):
        super().__init__()
        self.title("üß† –¢–ï–°–¢–ò –ù–ê –£–í–ê–ì–£ –¢–ê –ü–ê–ú'–Ø–¢–¨")
        screen_width = self.winfo_screenwidth()
        screen_height = self.winfo_screenheight()
        self.geometry(f"{int(screen_width * 0.8)}x{int(screen_height * 0.8)}")
        self.minsize(1000, 800)
        self.configure(fg_color=BACKGROUND_COLOR)
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(0, weight=1)

        self.container = ctk.CTkFrame(self, fg_color="white", corner_radius=15)
        self.container.grid(row=0, column=0, sticky="nsew", padx=20, pady=20)
        self.container.grid_columnconfigure(0, weight=1)
        self.container.grid_rowconfigure(0, weight=1)

        self.frames = {}
        for F in (MenuFrame, TestFrame1, TestFrame2, InfoFrame, ResultsFrame):
            frame = F(parent=self.container, controller=self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")

        self.show_frame(MenuFrame)
        self.after(100, self.center_window)
        self.bind("<Configure>", self.on_window_resize)

    def on_window_resize(self, event):
        if event.widget != self: return
        if self.winfo_width() < 800 or self.winfo_height() < 600:
            self.after_idle(lambda: self.geometry(f"800x600+{self.winfo_x()}+{self.winfo_y()}"))

    def center_window(self):
        self.update_idletasks()
        width = self.winfo_width()
        height = self.winfo_height()
        x = (self.winfo_screenwidth() // 2) - (width // 2)
        y = (self.winfo_screenheight() // 2) - (height // 2)
        self.geometry(f'+{x}+{y}')

    def show_frame(self, frame_class):
        frame = self.frames[frame_class]
        if hasattr(frame, "on_show"): frame.on_show()
        frame.tkraise()


class MenuFrame(ctk.CTkFrame):
    def __init__(self, parent, controller):
        super().__init__(parent, fg_color="white", corner_radius=15)
        self.controller = controller
        self.create_widgets()

    def create_widgets(self):
        main_frame = ctk.CTkFrame(self, fg_color="white")
        main_frame.pack(expand=True, fill="both", padx=50, pady=50)

        title_frame = ctk.CTkFrame(main_frame, fg_color="white")
        title_frame.pack(pady=(0, 40))

        ctk.CTkLabel(title_frame, text="üß†", font=("Arial", 82), text_color=BUTTON_COLOR).pack(side="left", padx=20)
        ctk.CTkLabel(title_frame, text="–¢–ï–°–¢–ò –ù–ê –£–í–ê–ì–£ –¢–ê –ü–ê–ú'–Ø–¢–¨", font=("Arial", 42, "bold"),
                     text_color=TEXT_COLOR).pack(side="left")

        buttons = [
            ("üî¢ –ú–ï–¢–û–î –í–Ü–î–¢–í–û–†–ï–ù–ù–Ø –†–Ø–î–Ü–í", TestFrame1),
            ("üîÑ –í–Ü–î–¢–í–û–†–ï–ù–ù–Ø –£ –ó–í–û–†–û–¢–ù–û–ú–£ –ü–û–†–Ø–î–ö–£", TestFrame2),
            ("üìù –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø", InfoFrame),
            ("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò", ResultsFrame),
        ]

        button_frame = ctk.CTkFrame(main_frame, fg_color="white")
        button_frame.pack(expand=True, fill="both")

        for text, frame_class in buttons:
            btn = ctk.CTkButton(
                button_frame, text=text, font=("Arial", 34, "bold"),
                command=lambda fc=frame_class: self.controller.show_frame(fc),
                fg_color=BUTTON_COLOR, hover_color=HOVER_COLOR,
                height=90, width=600, corner_radius=20,
                text_color="white", border_width=2, border_color="#FFFFFF"
            )
            btn.pack(pady=15, fill="x")

        ctk.CTkLabel(main_frame, text="–û–±–µ—Ä—ñ—Ç—å —Ç–µ—Å—Ç –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏",
                     font=("Arial", 28), text_color="#666666").pack(pady=(20, 0))


class BaseTestFrame(ctk.CTkFrame):
    def __init__(self, parent, controller, test_name, emoji):
        super().__init__(parent, fg_color="white")
        self.controller = controller
        self.test_name = f"{emoji} {test_name}"
        self.username = ""
        self.current_length = 4
        self.results = {}
        self.current_sequence = ""
        self.remaining_time = get_display_time(self.current_length) // 1000
        self.timer_id = None
        self.create_widgets()

    def create_widgets(self):
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)

        ctk.CTkLabel(self, text=self.test_name, font=FONT_LARGE, text_color=TEXT_COLOR).grid(row=0, column=0,
                                                                                             pady=(20, 30))

        self.name_frame = ctk.CTkFrame(self, fg_color="white")
        ctk.CTkLabel(self.name_frame, text="‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –í–∞—à–µ —ñ–º'—è:", font=FONT_MEDIUM, text_color=TEXT_COLOR).pack(
            side="left", padx=10)

        self.name_entry = ctk.CTkEntry(self.name_frame, font=FONT_MEDIUM, width=300, border_width=2, fg_color="white")
        self.name_entry.pack(side="left", padx=10)
        self.name_entry.bind("<Return>", lambda e: self.start_test())

        self.name_button = ctk.CTkButton(
            self.name_frame, text="üöÄ –ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç", font=FONT_MEDIUM,
            command=self.start_test, fg_color=BUTTON_COLOR, hover_color=HOVER_COLOR,
            height=60, text_color="white"
        )
        self.name_button.pack(side="left", padx=10)
        self.name_frame.grid(row=1, column=0, pady=20)

        self.test_frame = ctk.CTkFrame(self, fg_color="white")
        self.test_frame.grid(row=2, column=0, sticky="nsew", padx=50, pady=20)
        self.test_frame.grid_columnconfigure(0, weight=1)

        self.instruction_label = ctk.CTkLabel(self.test_frame, text="", font=FONT_MEDIUM, text_color=TEXT_COLOR,
                                              wraplength=800)
        self.instruction_label.grid(row=0, column=0, pady=10)

        self.display_label = ctk.CTkLabel(self.test_frame, text="", font=("Arial", 72, "bold"), text_color="#4B7BFF")
        self.display_label.grid(row=1, column=0, pady=20)

        self.timer_label = ctk.CTkLabel(self.test_frame, text="", font=FONT_MEDIUM, text_color="#FF6B6B")
        self.timer_label.grid(row=2, column=0, pady=10)

        self.entry = ctk.CTkEntry(self.test_frame, font=FONT_MEDIUM, width=400, border_width=2, fg_color="white")
        self.entry.bind("<Return>", lambda e: self.check_answer())

        self.submit_button = ctk.CTkButton(
            self.test_frame, text="üì§ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏", font=FONT_MEDIUM,
            command=self.check_answer, fg_color=BUTTON_COLOR, hover_color=HOVER_COLOR,
            height=60, text_color="white"
        )

        ctk.CTkButton(
            self, text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", font=FONT_MEDIUM,
            command=self.back_to_menu, fg_color="#F0F0F0", hover_color="#E0E0E0",
            text_color=TEXT_COLOR, height=60, border_width=0
        ).grid(row=3, column=0, pady=20)

    def on_show(self):
        if self.name_entry.winfo_ismapped():
            self.name_entry.focus_set()

    def start_test(self):
        name = self.name_entry.get().strip()
        if not name:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º'—è!")
            return
        self.username = name
        self.name_frame.grid_forget()
        self.instruction_label.configure(text="–ü—Ä–∏–≥–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –ø–µ—Ä—à–æ–≥–æ —Ä—è–¥—É...")
        self.after(1000, self.next_trial)

    def next_trial(self):
        if self.current_length > 10:
            self.end_test()
            return
        self.remaining_time = get_display_time(self.current_length) // 1000
        self.current_sequence = generate_sequence(self.current_length)
        self.display_label.configure(text=self.current_sequence)
        self.timer_label.configure(text=f"–ß–∞—Å: {self.remaining_time} —Å–µ–∫")
        self.entry.grid_forget()
        self.submit_button.grid_forget()
        self.countdown()

    def countdown(self):
        if self.remaining_time > 0:
            self.timer_label.configure(text=f"–ß–∞—Å: {self.remaining_time} —Å–µ–∫")
            self.remaining_time -= 1
            self.timer_id = self.after(1000, self.countdown)
        else:
            self.after_cancel(self.timer_id)
            self.prompt_answer()

    def prompt_answer(self):
        self.display_label.configure(text="")
        self.instruction_label.configure(text=f"–î–æ–≤–∂–∏–Ω–∞: {self.current_length}\n–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∞–º'—è—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥:")
        self.timer_label.configure(text="")
        self.entry.grid(row=3, column=0, pady=10)
        self.submit_button.grid(row=4, column=0, pady=10)
        self.entry.focus_set()
        self.entry.icursor("end")

    def check_answer(self):
        user_input = self.entry.get().strip()
        correct = user_input == self.get_correct_answer()
        self.results[self.current_length] = correct
        msg = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if correct else f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ä—è–¥: {self.get_correct_answer()}"
        messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç", msg)
        self.current_length += 1
        self.instruction_label.configure(text="–ü—Ä–∏–≥–æ—Ç—É–π—Ç–µ—Å—è –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—è–¥—É...")
        self.entry.delete(0, "end")
        self.entry.grid_forget()
        self.submit_button.grid_forget()
        self.after(1000, self.next_trial)

    def get_correct_answer(self):
        return self.current_sequence

    def end_test(self):
        A = 3
        for length in range(4, 11):
            if self.results.get(length, False):
                A = length
            else:
                break

        m, n = 0, 0
        for length in range(A + 1, 11):
            if length in self.results:
                m += 1 if self.results[length] else 0
                n += 1

        V = A + (m / n if n > 0 else 0)
        level = evaluate_level(V)
        result_text = (
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—É:\n–¢–µ—Å—Ç: {self.test_name}\n–Ü–º'—è: {self.username}\n"
            f"A = {A}\nm = {m}, n = {n}\nV = {V:.2f}\n–†—ñ–≤–µ–Ω—å: {level}"
        )

        self.show_result_window(result_text)
        save_result(self.username, self.test_name, result_text)
        self.reset_test()
        self.controller.show_frame(MenuFrame)

    def show_result_window(self, text):
        win = ctk.CTkToplevel(self)
        win.title("–†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£")
        win.geometry("900x700")
        win.configure(fg_color=BACKGROUND_COLOR)
        win.update_idletasks()
        width = win.winfo_width()
        height = win.winfo_height()
        x = (win.winfo_screenwidth() // 2) - (width // 2)
        y = (win.winfo_screenheight() // 2) - (height // 2)
        win.geometry(f'+{x}+{y}')

        ctk.CTkLabel(win, text="üìù", font=("Arial", 72), text_color=BUTTON_COLOR, fg_color="transparent").pack(
            pady=(20, 0))
        ctk.CTkLabel(win, text="–†–ï–ó–£–õ–¨–¢–ê–¢–ò –¢–ï–°–¢–£", font=("Arial", 42, "bold"), text_color=TEXT_COLOR,
                     fg_color="transparent").pack(pady=(0, 20))

        textbox = ctk.CTkTextbox(
            win, font=("Arial", 32), wrap="word", fg_color="white", text_color=TEXT_COLOR,
            border_width=3, border_color="#E0E0E0", activate_scrollbars=True,
            spacing3=15, height=400, width=800
        )
        textbox.pack(fill="both", expand=True, padx=40, pady=(0, 20))
        textbox.insert("1.0", text)
        textbox.configure(state="disabled")

        btn = ctk.CTkButton(
            win, text="–û–ö", command=win.destroy, font=("Arial", 36, "bold"),
            fg_color=BUTTON_COLOR, hover_color=HOVER_COLOR,
            height=80, width=200, corner_radius=20, text_color="white"
        )
        btn.pack(pady=30)
        btn.focus_set()

    def reset_test(self):
        self.username = ""
        self.current_length = 4
        self.results = {}
        self.current_sequence = ""
        self.name_entry.delete(0, "end")
        self.name_frame.grid(row=1, column=0, pady=20)
        self.instruction_label.configure(text="")
        self.display_label.configure(text="")
        self.timer_label.configure(text="")
        self.entry.grid_forget()
        self.submit_button.grid_forget()

    def back_to_menu(self):
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏–π—Ç–∏ –∑ —Ç–µ—Å—Ç—É —ñ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—è –≤ –º–µ–Ω—é?"):
            if self.timer_id: self.after_cancel(self.timer_id)
            self.reset_test()
            self.controller.show_frame(MenuFrame)


class TestFrame1(BaseTestFrame):
    def __init__(self, parent, controller):
        super().__init__(parent, controller, "–ú–µ—Ç–æ–¥ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥—ñ–≤", "üî¢")


class TestFrame2(BaseTestFrame):
    def __init__(self, parent, controller):
        super().__init__(parent, controller, "–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É", "üîÑ")

    def get_correct_answer(self):
        return self.current_sequence[::-1]

    def prompt_answer(self):
        self.display_label.configure(text="")
        self.instruction_label.configure(
            text=f"–î–æ–≤–∂–∏–Ω–∞: {self.current_length}\n–í–≤–µ–¥—ñ—Ç—å –∑–∞–ø–∞–º'—è—Ç–æ–≤–∞–Ω–∏–π —Ä—è–¥ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É:")
        self.timer_label.configure(text="")
        self.entry.grid(row=3, column=0, pady=10)
        self.submit_button.grid(row=4, column=0, pady=10)
        self.entry.focus_set()
        self.entry.icursor("end")


class InfoFrame(ctk.CTkFrame):
    def __init__(self, parent, controller):
        super().__init__(parent, fg_color="white")
        self.controller = controller
        self.create_widgets()

    def create_widgets(self):
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)
        ctk.CTkLabel(self, text="üìö –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ç–µ—Å—Ç–∏", font=FONT_LARGE, text_color=TEXT_COLOR).grid(row=0, column=0,
                                                                                                       pady=(20, 30))

        info_text = """
        –¶—ñ –¢–µ—Å—Ç–∏ –≤–∏–º—ñ—Ä—é—é—Ç—å –∑–¥–∞—Ç–Ω—ñ—Å—Ç—å –¥–æ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—ó, —à–≤–∏–¥–∫–æ—ó –æ–±—Ä–æ–±–∫–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ —Ä–æ–±–æ—Ç–∏ –∑—ñ –∑—Ä–æ—Å—Ç–∞—é—á–æ—é —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—é –∑–∞–≤–¥–∞–Ω—å.

    üî¢ –¢–µ—Å—Ç "–ú–µ—Ç–æ–¥ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä—è–¥—ñ–≤"
        - –í–∞–º –ø–æ–∫–∞–∑—É—é—Ç—å —Ä—è–¥ —á–∏—Å–µ–ª (–≤—ñ–¥ 4 –¥–æ 10 —Ü–∏—Ñ—Ä) –Ω–∞ 5 —Å–µ–∫—É–Ω–¥.
        - –ü–æ—Ç—ñ–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ü—ñ —á–∏—Å–ª–∞ –≤ —Ç–æ–º—É –∂ –ø–æ—Ä—è–¥–∫—É.

    üîÑ –¢–µ—Å—Ç "–í—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É":
        - –ê–Ω–∞–ª–æ–≥—ñ—á–Ω–∏–π, –∞–ª–µ —á–∏—Å–ª–∞ —Ç—Ä–µ–±–∞ –≤–≤–æ–¥–∏—Ç–∏ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.

    üìà –§–æ—Ä–º—É–ª–∞ –æ—Ü—ñ–Ω–∫–∏:
        V = A + (m/n), –¥–µ:
        - A ‚Äì –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –¥–æ–≤–∂–∏–Ω–∞, —è–∫—É –≤–∏ –≤–≥–∞–¥–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ.
        - m ‚Äì –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤–¥–∞–ª–∏—Ö —Å–ø—Ä–æ–± –¥–ª—è –¥–æ–≤–∂–∏–Ω > A.
        - n ‚Äì –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø—Ä–æ–± –¥–ª—è –¥–æ–≤–∂–∏–Ω > A.

    üèÜ –†—ñ–≤–Ω—ñ:
        - V < 4: –ù–∏–∑—å–∫–∏–π —Ä—ñ–≤–µ–Ω—å –ø–∞–º'—è—Ç—ñ
        - 4 ‚â§ V < 6: –°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å
        - V ‚â• 6: –í–∏—Å–æ–∫–∏–π —Ä—ñ–≤–µ–Ω—å
        
    üìä –î–ª—è —á–æ–≥–æ —Ä–∞—Ö—É–≤–∞—Ç–∏ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è (Std)?
        1. –û—Ü—ñ–Ω–∫–∞ —Å—Ç–∞–±—ñ–ª—å–Ω–æ—Å—Ç—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
            - –ù–∏–∑—å–∫–∏–π Std (–Ω–∞–ø—Ä. 0.5): –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ (–Ω–∞–ø—Ä. V = 4.2, 4.3, 4.1).
            - –í–∏—Å–æ–∫–∏–π Std (–Ω–∞–ø—Ä. 1.8): –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –∫–æ–ª–∏–≤–∞—é—Ç—å—Å—è (–Ω–∞–ø—Ä. V = 3.0, 5.5, 4.0).
            
        2. –í–∏—è–≤–ª–µ–Ω–Ω—è –∞–Ω–æ–º–∞–ª—ñ–π
            - –†—ñ–∑–∫—ñ —Å—Ç—Ä–∏–±–∫–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö (–Ω–∞–ø—Ä. V = 2.0 ‚Üí 6.0 ‚Üí 3.5) –¥–∞—é—Ç—å –≤–∏—Å–æ–∫–∏–π Std.
            –ü—Ä–∏—á–∏–Ω–∞: –¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø–æ–º–∏–ª–∫–∏, –∑–æ–≤–Ω—ñ—à–Ω—ñ —Ñ–∞–∫—Ç–æ—Ä–∏ (—à—É–º, —Å—Ç—Ä–µ—Å).
            
        3. –í—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–µ—Å—É
            - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è ‚Üì (–Ω–∞–ø—Ä. –∑ 1.5 –¥–æ 0.7): –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞—î —Å—Ç–∞–±—ñ–ª—å–Ω—ñ—à–∏–º.
            - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è ‚Üë: –ü–æ—Ç—Ä—ñ–±–Ω–æ –∫–æ—Ä–∏–≥—É–≤–∞—Ç–∏ —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è.
            
        4. –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑–∞—Ü—ñ—è –Ω–∞–≤—á–∞–Ω–Ω—è
            - –î–ª—è –≤–∏—Å–æ–∫–æ–≥–æ Std: –ö–æ—Ä–æ—Ç—à—ñ/—á–∞—Å—Ç—ñ—à—ñ —Ç–µ—Å—Ç–∏ —Ç–∞ –í–ø—Ä–∞–≤–∏ –Ω–∞ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü—ñ—é.
            - –î–ª—è –Ω–∏–∑—å–∫–æ–≥–æ Std: –°–∫–ª–∞–¥–Ω—ñ—à—ñ –∑–∞–≤–¥–∞–Ω–Ω—è.
        
    üí° –†–æ–∑—Ä–æ–±–Ω–∏–∫–∏:
        —Å—Ç—É–¥–µ–Ω—Ç–∏ –ù–ù–Ü–Ü–¢—Ç–∞–Ü–ü –≥—Ä—É–ø–∏ –ö–ù–º–∞–≥11 –ì—Ä–∏–≥–æ—Ä—á—É–∫ –ö–∞—Ç–µ—Ä–∏–Ω–∞ —Ç–∞ –Ñ–≤—Ç—É—à–æ–∫ –ï–º—ñ–ª—ñ—è
        """

        text_area = ctk.CTkTextbox(
            self, font=FONT_SMALL, wrap="word", fg_color="white", text_color=TEXT_COLOR,
            border_width=2, border_color="#E0E0E0", activate_scrollbars=True
        )
        text_area.grid(row=1, column=0, sticky="nsew", padx=50, pady=(0, 20))
        text_area.insert("1.0", info_text)
        text_area.configure(state="disabled")

        ctk.CTkButton(
            self, text="üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", font=FONT_MEDIUM,
            command=lambda: self.controller.show_frame(MenuFrame),
            fg_color=BUTTON_COLOR, hover_color=HOVER_COLOR, height=60, text_color="white"
        ).grid(row=2, column=0, pady=20)


class ResultsFrame(ctk.CTkFrame):
    def __init__(self, parent, controller):
        super().__init__(parent, fg_color="white")
        self.controller = controller
        self.create_widgets()

    def create_widgets(self):
        self.grid_columnconfigure(0, weight=1)
        self.grid_rowconfigure(1, weight=1)

        title_frame = ctk.CTkFrame(self, fg_color="white")
        title_frame.grid(row=0, column=0, pady=(20, 10))
        ctk.CTkLabel(title_frame, text="üìä", font=("Arial", 72), text_color="#4B7BFF").pack(side="left", padx=20)
        ctk.CTkLabel(title_frame, text="–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–µ—Å—Ç—ñ–≤", font=("Arial", 30, "bold"), text_color=TEXT_COLOR).pack(
            side="left")

        self.text_area = ctk.CTkTextbox(
            self, font=("Arial", 24), wrap="word", fg_color="white", text_color=TEXT_COLOR,
            border_width=2, border_color="#E0E0E0", activate_scrollbars=True, spacing3=10
        )
        self.text_area.grid(row=1, column=0, sticky="nsew", padx=50, pady=(0, 20))
        self.text_area.configure(state="disabled")

        button_frame = ctk.CTkFrame(self, fg_color="white")
        button_frame.grid(row=2, column=0, pady=10)

        buttons = [
            ("üßπ –û—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏", self.clear_results, "#FF7A9C", "#FF9BB8"),
            ("üìà –ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤", self.analyze_results, BUTTON_COLOR, HOVER_COLOR),
            ("üîô –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", lambda: self.controller.show_frame(MenuFrame), "#F0F0F0", "#E0E0E0")
        ]

        for text, command, fg, hover in buttons:
            btn = ctk.CTkButton(
                button_frame, text=text, font=("Arial", 24), command=command,
                fg_color=fg, hover_color=hover, height=80, corner_radius=15,
                text_color="white" if fg != "#F0F0F0" else TEXT_COLOR
            )
            btn.pack(side="left", padx=20)

    def on_show(self):
        self.load_results()

    def load_results(self):
        self.text_area.configure(state="normal")
        self.text_area.delete("1.0", "end")
        if os.path.exists("results.txt"):
            with open("results.txt", "r", encoding="utf-8") as f:
                self.text_area.insert("1.0", f.read())
        else:
            self.text_area.insert("1.0", "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤.")
        self.text_area.configure(state="disabled")

    def clear_results(self):
        if messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏?"):
            with open("results.txt", "w") as f: f.write("")
            self.load_results()
            messagebox.showinfo("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏", "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –æ—á–∏—â–µ–Ω–æ.")

    def analyze_results(self):
        analysis_data = analyze_results()
        if not analysis_data:
            messagebox.showinfo("–ê–Ω–∞–ª—ñ–∑", "–ü–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.")
            return

        analysis_text = f"""–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤:\n\n–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–µ—Å—Ç—ñ–≤: {analysis_data['total_tests']}
–ó–∞–≥–∞–ª—å–Ω–µ —Å–µ—Ä–µ–¥–Ω—î V: {analysis_data['overall_avg']:.2f}
–ó–∞–≥–∞–ª—å–Ω–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {analysis_data['overall_std']:.2f}\n\n–ó–∞ —Ç–µ—Å—Ç–∞–º–∏:\n"""

        for test, stats in analysis_data["tests_stats"].items():
            analysis_text += f"{test}:\n  –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {stats['count']}\n  –°–µ—Ä–µ–¥–Ω—î V: {stats['avg']:.2f}\n  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {stats['std']:.2f}\n\n"

        analysis_text += "–ó–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏:\n"
        for user, stats in analysis_data["users_stats"].items():
            analysis_text += f"{user}:\n  –ö—ñ–ª—å–∫—ñ—Å—Ç—å: {stats['count']}\n  –°–µ—Ä–µ–¥–Ω—î V: {stats['avg']:.2f}\n  –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: {stats['std']:.2f}\n\n"

        win = ctk.CTkToplevel(self)
        win.title("–ê–Ω–∞–ª—ñ–∑ —Ç—Ä–µ–Ω–¥—ñ–≤")
        win.geometry("900x800")
        win.transient(self)
        win.grab_set()
        win.update_idletasks()
        width = win.winfo_width()
        height = win.winfo_height()
        x = (win.winfo_screenwidth() - width) // 2
        y = (win.winfo_screenheight() - height) // 2
        win.geometry(f"+{x}+{y}")
        win.lift()

        textbox = ctk.CTkTextbox(
            win, font=("Arial", 24), wrap="word", spacing3=10,
            fg_color="white", border_width=2, border_color="#E0E0E0"
        )
        textbox.pack(fill="both", expand=True, padx=20, pady=20)
        textbox.insert("1.0", analysis_text)
        textbox.configure(state="disabled")

        btn = ctk.CTkButton(
            win, text="–û–ö", command=win.destroy, font=("Arial", 24, "bold"),
            fg_color=BUTTON_COLOR, hover_color=HOVER_COLOR,
            height=60, width=200, corner_radius=15, text_color="white"
        )
        btn.pack(pady=(0, 20))
        btn.focus_set()


if __name__ == "__main__":
    app = MainApplication()
    app.mainloop()